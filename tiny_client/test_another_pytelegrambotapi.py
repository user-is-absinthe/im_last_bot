import os
import logging

import telebot
from telebot import types

from end import cl_func as to_db

"""
documentation:
https://pypi.org/project/pyTelegramBotAPI/
"""


PATH_TO_TOKEN = '/Users/owl/Pycharm/PycharmProjects/im_last_bot/tiny_client/bot_token.txt'
PATH_TO_LOG = '/Users/owl/Pycharm/PycharmProjects/im_last_bot/files/test.log'
OVERWRITE_LOG = False
PATH_TO_DB = '/Users/owl/Pycharm/PycharmProjects/im_last_bot/files/test.db'
OVERWRITE_BASE = True
SECRET_WORD = '123'


SECRET_USERS = list()


token_file = open(PATH_TO_TOKEN, 'r')
token = token_file.read()

if OVERWRITE_LOG:
    try:
        os.remove(PATH_TO_LOG)
    except FileNotFoundError:
        pass

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(threadName)s] [%(funcName)s] [%(levelname)s]  %(message)s",
    handlers=[
        logging.FileHandler(PATH_TO_LOG),
        logging.StreamHandler()
    ])

if OVERWRITE_BASE:
    try:
        os.remove(PATH_TO_DB)
        to_db.start_defaullt(PATH_TO_DB)
    except FileNotFoundError:
        pass

logging.info('Database connected.')

logging.info('Program start.')

bot = telebot.TeleBot(token)


@bot.message_handler(commands=['start', 'help', 'reg', 'count', 'word'])
def start_help(message):
    logging.info('User {0} (user id is {1}) send {2}.'.format(
        '@' + message.from_user.username,
        message.from_user.id,
        message.text
    ))
    if message.text == '/start':
        to_send = '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫.\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.' + \
                  '\n–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg.'
        # bot.send_message(message.from_user.id, 'first message')
        bot.reply_to(message, to_send)
    elif message.text == '/help':
        to_send = '–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' \
                  '\t/help - –≤—ã–≤–æ–¥ –º–µ–Ω—é –ø–æ–º–æ—â–∏\n' \
                  '\t/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
                  '\t/count - —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π\n' \
                  '\t/word - –≤–≤–æ–¥ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞\n' \
                  '\t/reason - —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø–æ—Å–µ—â–µ–Ω–∏—è\n' \
                  '\t/game - –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É—à–∫—É\n'
        if message.from_user.id in SECRET_USERS:
            special = '\n–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' \
                      '\t/get_all - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;\n' \
                      '\t/go_away - —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å:\n' \
                      '\t/new_secret - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ\n' \
                      '\t/next_user - –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
                      '\t/stop - –ø—Ä–∏–æ—Å—Ç–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–µ–º\n' \
                      '\t/get_user - –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
                      '\t/send_message - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n' \
                      '\t/send_message_all - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º\n'
            to_send += special
        bot.send_message(message.from_user.id, to_send)

    elif message.text == '/reg':
        pre_get_name(message=message)
    elif message.text == '/count':
        # TODO: —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –¥–æ —Ç–µ–±—è –≤ –æ—á–µ—Ä–µ–¥–∏, –ø—Ä–µ–¥—ã–¥—É—â–∏–π
        print('amkd')
        count_before_i = to_db.count_before_id(id_tg_user=message.from_user.id, path=PATH_TO_DB)
        prev_user = to_db.prev_client(me_num=message.from_user.id, path=PATH_TO_DB)
        print(count_before_i)
        print(prev_user)
        to_send = '–ü–µ—Ä–µ–¥ –≤–∞–º–∏ {0} —á–µ–ª–æ–≤–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏.\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≤–∞—Ä–∏—â {1}.'
        bot.send_message(message.from_user.id, to_send)
        pass
    elif message.text == '/word':
        to_send = '–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ.'
        bot.send_message(message.from_user.id, to_send)
        bot.register_next_step_handler(message, check_secret)
        # TODO: add secret word
    elif message.text == '/reason':
        send_message = '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è.'
        bot.send_message(message.from_user.id, send_message)
        bot.register_next_step_handler(message, reason)

    # TODO: fix special func
    elif message.text == '/get_all' and message.from_user.id in SECRET_USERS:
        print('awdjbl')
        pass
    elif message.text == '/go_away' and message.from_user.id in SECRET_USERS:
        pass
    elif message.text == '/new_secret' and message.from_user.id in SECRET_USERS:
        pass
    elif message.text == '/next_user' and message.from_user.id in SECRET_USERS:
        pass
    elif message.text == '/stop' and message.from_user.id in SECRET_USERS:
        pass
    elif message.text == '/get_user' and message.from_user.id in SECRET_USERS:
        pass
    elif message.text == '/send_message' and message.from_user.id in SECRET_USERS:
        pass

        pass


@bot.message_handler(content_types=['text'])
def get_text_message(message):
    logging.info('Catch message: {}.'.format(message))
    # print(message.text)
    bot.send_message(message.from_user.id, 'catch')

    # if message.text == '/reg':
    #     bot.send_message(message.from_user.id, '–ü—Ä–µ–¥—Å—Ç–∞–≤—Ç–µ—Å—å.\n–ò–º—è —É–≤–∏–¥–∏—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –≤—ã–±–∏—Ä–∞–π—Ç–µ –º—É–¥—Ä–æ.')
    #     bot.register_next_step_handler(message, get_name)


def check_secret(message):
    if message.text == SECRET_WORD:
        send_text = '–û—Ç–ª–∏—á–Ω–æ, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help.'
        SECRET_USERS.append(message.from_user.id)
        bot.send_message(message.from_user.id, send_text)
    else:
        send_text = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç.'
        bot.send_message(message.from_user.id, send_text)
    pass


def pre_get_name(message):
    to_send = '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è. ' \
              '–í—ã–±–∏—Ä–∞–π—Ç–µ –º—É–¥—Ä–æ, —Ç–∞–∫ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–Ω—ã –ø–æ–¥ —ç—Ç–∏–º –∏–º–µ–Ω–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–º.'
    bot.send_message(message.from_user.id, to_send)
    print(message)
    bot.register_next_step_handler(message, get_name)


def get_name(message):
    global PATH_TO_DB
    name = message.text

    # TODO: add user id and name in base primary key id
    user_id = message.from_user.id
    tg_name = message.chat.username

    logging.info('Try add user {0} into DB.'.format(user_id))
    check_exist = to_db.registr(
        path=PATH_TO_DB, id_tg_user=user_id, nickname=name, tgname=tg_name
    )

    if check_exist:
        logging.info('User {0} added into DB.'.format(user_id))

        markup = types.ReplyKeyboardMarkup(row_width=2)
        call_yes = types.KeyboardButton('–î–∞')
        call_no = types.KeyboardButton('–ù–µ—Ç')
        markup.add(call_yes, call_no)
        bot.send_message(message.from_user.id, "–í–∞—Å –∑–æ–≤—É—Ç {0}, –≤–µ—Ä–Ω–æ?".format(name), reply_markup=markup)
        bot.register_next_step_handler(message, pre_reason)
    else:
        logging.info('User {0} exist into DB.'.format(user_id))
        send_message = '–û—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å. üßê\n' \
                       '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è.'
        bot.send_message(message.from_user.id, send_message)
        bot.register_next_step_handler(message, reason)


def pre_reason(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    # bot.send_message(message.from_user.id, '–ù–µ–º–Ω–æ–≥–æ –º–∞–≥–∏–∏: –ø—Ä—è—á—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.', reply_markup=markup)
    if message.text == '–î–∞':
        text_message = '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è.'
        print(text_message)
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
        bot.register_next_step_handler(message, reason)
    elif message.text == '–ù–µ—Ç':
        text_message = '–ñ–∞–ª—å. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑.'
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
        bot.register_next_step_handler(message, get_name)
    else:
        text_message = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø—Ä–∞–≤–∫–æ–π.\n/help'
        print(text_message)
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
    pass


def reason(message):
    global PATH_TO_DB
    # TODO: get user info from DB by user_tg_id
    # to_base(user_tg_id) -> name
    print('u a here')
    user_id = message.from_user.id
    # name = 'A'
    name = to_db.select_cl_id_tg(user_id, PATH_TO_DB)
    user_reason = message.text
    # bot.send_message(message.from_user.id, '#TEST\n–æ—Ç–ª–∏—á–Ω–æ. –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç —Å–≤—è–∑–∏ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–æ–π, –ø–æ—ç—Ç–æ–º—É...')

    markup = types.ReplyKeyboardMarkup(row_width=2)
    call_yes = types.KeyboardButton('–î–∞')
    call_no = types.KeyboardButton('–ù–µ—Ç')
    markup.add(call_yes, call_no)
    # bot.send_message(message.from_user.id, "–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:\n{0}\n–í—Å–µ —Ç–∞–∫?".format(name), reply_markup=markup)
    # bot.register_next_step_handler(message, pre_reason)

    print(message.from_user.id, user_reason)
    to_db.upd_message(
        id_tg=message.from_user.id,
        msg=user_reason,
        path=PATH_TO_DB
    )

    to_send = '''–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–í–∞—Å –∑–æ–≤—É—Ç:\n{0}
    \n–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:\n{1}'''.format(name, user_reason)
    bot.send_message(message.from_user.id, to_send, reply_markup=markup)
    bot.register_next_step_handler(message, pre_reason)


def check_reason(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    if message.text == '–î–∞':
        text_message = '–û—Ç–ª–∏—á–Ω–æ, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É.'
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
        pass
    elif message.text == '–ù–µ—Ç':
        text_message = '–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.'
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
        bot.register_next_step_handler(message, pre_get_name)
    else:
        text_message = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø—Ä–∞–≤–∫–æ–π.\n/help'
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
    pass


def random_message(id_tg_user, text_message):
    bot.send_message(id_tg_user, text_message)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    if call.data == "reason_successful_register":
        bot.send_message(call.message.chat.id, '–î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å.')
        # TODO: update user info by id
        # to_base(user_id, reason) -> True/False
        # to_base(call.message.from_user.id, reason???)
    elif call.data == "reason_register_failed":
        bot.send_message(call.message.chat.id, '–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.')
        # TODO: delete all user info by id
        # to_base(user_id) -> True/False

    # register:
    elif call.data == 'get_name_yes':
        print(call.message)
        bot.register_next_step_handler(call.message, pre_reason)
        pass
    elif call.data == 'get_name_no':
        # bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è.')
        bot.register_next_step_handler(call.message, reason)


bot.polling(none_stop=False, interval=0)
