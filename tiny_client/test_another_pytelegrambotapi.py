import os
import logging

import telebot
from telebot import types

from end import cl_func as to_db

"""
documentation:
https://pypi.org/project/pyTelegramBotAPI/
"""


PATH_TO_TOKEN = '/Users/owl/Pycharm/PycharmProjects/im_last_bot/tiny_client/bot_token.txt'


if __name__ == '__main__':
    PATH_TO_LOG = '/Users/owl/Pycharm/PycharmProjects/im_last_bot/files/test.log'
    OVERWRITE_LOG = False
    PATH_TO_DB = '/Users/owl/Pycharm/PycharmProjects/im_last_bot/files/test.db'
    OVERWRITE_BASE = False
    SECRET_WORD = '123'

    SECRET_USERS = list()

    if OVERWRITE_LOG:
        try:
            os.remove(PATH_TO_LOG)
        except FileNotFoundError:
            pass

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(threadName)s] [%(funcName)s] [%(levelname)s]  %(message)s",
        handlers=[
            logging.FileHandler(PATH_TO_LOG),
            logging.StreamHandler()
        ])

    if OVERWRITE_BASE:
        try:
            os.remove(PATH_TO_DB)
        except FileNotFoundError:
            pass
    to_db.start_defaullt(PATH_TO_DB)
    logging.info('Database connected.')

    logging.info('Program start.')


token_file = open(PATH_TO_TOKEN, 'r')
token = token_file.read()

bot = telebot.TeleBot(token)


@bot.message_handler(commands=[
    'start', 'help', 'reg', 'count', 'reason', 'game', 'word', 'get_all',
    'go_away', 'next_user', 'stop', 'get_user', 'send_message', 'send_message_all'
])
def start_help(message):
    logging.info('User {0} (user id is {1}) send {2}.'.format(
        'None' if message.from_user.username is None else message.from_user.username,
        message.from_user.id,
        message.text
    ))

    if message.text == '/start':
        to_send = '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫.\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.' + \
                  '\n–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg.'
        # bot.send_message(message.from_user.id, 'first message')
        bot.reply_to(message, to_send)
    elif message.text == '/help':
        to_send = '–û–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' \
                  '\t/help - –≤—ã–≤–æ–¥ –º–µ–Ω—é –ø–æ–º–æ—â–∏\n' \
                  '\t/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
                  '\t/count - —É–∑–Ω–∞—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π\n' \
                  '\t/word - –≤–≤–æ–¥ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞\n' \
                  '\t/reason - —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É –ø–æ—Å–µ—â–µ–Ω–∏—è\n' \
                  '\t/game - –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É—à–∫—É\n'
        if message.from_user.id in SECRET_USERS:
            special = '\n–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' \
                      '\t/get_all - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π;\n' \
                      '\t/go_away - —Ä–∞—Å–ø—É—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å:\n' \
                      '\t/next_user - –≤—ã–∑–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
                      '\t/stop - –ø—Ä–∏–æ—Å—Ç–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–µ–º\n' \
                      '\t/get_user - –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' \
                      '\t/send_message - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n' \
                      '\t/send_message_all - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º\n'
            to_send += special
        bot.send_message(message.from_user.id, to_send)

    elif message.text == '/reg':
        pre_get_name(message=message)
    elif message.text == '/count':
        count_before_i = to_db.count_before(id_tg_user=message.from_user.id, path=PATH_TO_DB)
        prev_user_raw = to_db.prev_client(id_tg_user=message.from_user.id, path=PATH_TO_DB)
        prev_user = '{0} (@{1})'.format(prev_user_raw[2], prev_user_raw[3])
        to_send = '–ü–µ—Ä–µ–¥ –≤–∞–º–∏ {0} —á–µ–ª–æ–≤–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏.\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≤–∞—Ä–∏—â - {1}.'.format(count_before_i, prev_user)
        bot.send_message(message.from_user.id, to_send)
        pass
    elif message.text == '/word':
        to_send = '–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ.'
        bot.send_message(message.from_user.id, to_send)
        bot.register_next_step_handler(message, check_secret)
    elif message.text == '/reason':
        send_message = '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è.'
        bot.send_message(message.from_user.id, send_message)
        bot.register_next_step_handler(message, reason)
    elif message.text == '/game':
        send_message = '–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –∏–≥—Ä—É, –∑–Ω–∞—á–∏—Ç –∫–æ–µ-–∫—Ç–æ –∫–æ–µ-—á—Ç–æ —Ç–∞–∫ –∏ –Ω–µ —Å–¥–µ–ª–∞–ª.'
        bot.send_message(message.from_user.id, send_message)

    elif message.text == '/get_all' and message.from_user.id in SECRET_USERS:
        all_users = to_db.all_client(PATH_TO_DB)
        regular_row = '{0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (@{1}) —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å –∫ –≤–∞–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ {2}.\n'
        all_rows = '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏:\n'
        for user in all_users:
            all_rows += regular_row.format(
                user[2], user[3], user[5]
            )
        bot.send_message(message.from_user.id, all_rows)
    elif message.text == '/go_away' and message.from_user.id in SECRET_USERS:
        for user in to_db.all_client(PATH_TO_DB):
            send_message = '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–µ–º –æ–∫–æ–Ω—á–µ–Ω.'
            try:
                bot.send_message(user[0], send_message)
            except telebot.apihelper.ApiException:
                pass
        bot.send_message(message.from_user.id, '–û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø—É—â–µ–Ω–∞.')
        to_db.drop_all_cl(PATH_TO_DB)
    elif message.text == '/next_user' and message.from_user.id in SECRET_USERS:
        # TODO: change status this user and send message to next user
        # TODO: test it
        all_users = to_db.all_client(PATH_TO_DB)
        keyboard = types.InlineKeyboardMarkup()
        for user in all_users:
            face_button = '{0} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å –∫ –≤–∞–º –ø–æ –ø—Ä–∏—á–∏–Ω–µ {1}.'.format(
                user[2], user[5]
            )
            keyboard.add(types.InlineKeyboardButton(text=face_button, callback_data=user[0]))
        send_message = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
        bot.send_message(message.from_user.id, text=send_message, reply_markup=keyboard)
        pass
    elif message.text == '/stop' and message.from_user.id in SECRET_USERS:
        # TODO: change status this user
        pass
    elif message.text == '/get_user' and message.from_user.id in SECRET_USERS:
        # TODO: send message to next user
        pass
    elif message.text == '/send_message' and message.from_user.id in SECRET_USERS:
        #
        pass
    elif message.text == '/send_message_all' and message.from_user.id in SECRET_USERS:
        pass


@bot.message_handler(content_types=['text'])
def get_text_message(message):
    logging.info('Catch message: {}.'.format(message))
    # print(message.text)
    bot.send_message(message.from_user.id, '–Ø –ø–æ–π–º–∞–ª –∫–∞–∫–æ–µ-—Ç–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. '
                                           '–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –≤—Å–µ –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–æ.\n/help –¥–ª—è –ø–æ–º–æ—â–∏.')


def check_secret(message):
    if message.text == SECRET_WORD:
        send_text = '–û—Ç–ª–∏—á–Ω–æ, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help.'
        SECRET_USERS.append(message.from_user.id)
        to_db.drop_client_tg_id(message.from_user.id, PATH_TO_DB)
        bot.send_message(message.from_user.id, send_text)
    else:
        send_text = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç.'
        bot.send_message(message.from_user.id, send_text)
    pass


def pre_get_name(message):
    if message.from_user.id in SECRET_USERS:
        to_send = '–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ "—Å—É–ø–µ—Ä-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å". ' \
                  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –≤–Ω–æ—Å–∏—Ç–µ —Å—É–º—è—Ç–∏—Ü—É –≤ –æ—á–µ—Ä–µ–¥—å —Å–≤–æ–∏–º –ø–æ—è–≤–ª–µ–Ω–∏–µ–º.'
        bot.send_message(message.from_user.id, to_send)
        return 0
    to_send = '–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è. ' \
              '–í—ã–±–∏—Ä–∞–π—Ç–µ –º—É–¥—Ä–æ, —Ç–∞–∫ –∫–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –≤–∏–¥–Ω—ã –ø–æ–¥ —ç—Ç–∏–º –∏–º–µ–Ω–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–º.'
    bot.send_message(message.from_user.id, to_send)
    print(message)
    bot.register_next_step_handler(message, get_name)


def get_name(message):
    global PATH_TO_DB
    name = message.text

    # TODO: add user id and name in base primary key id
    user_id = message.from_user.id
    tg_name = 'None' if message.from_user.username is None else message.from_user.username

    logging.info('Try add user {0} into DB.'.format(user_id))
    check_exist = to_db.registr(
        path=PATH_TO_DB, id_tg_user=user_id, nickname=name, tgname=tg_name
    )

    if check_exist:
        logging.info('User {0} added into DB.'.format(user_id))

        markup = types.ReplyKeyboardMarkup(row_width=2)
        call_yes = types.KeyboardButton('–î–∞')
        call_no = types.KeyboardButton('–ù–µ—Ç')
        markup.add(call_yes, call_no)
        bot.send_message(message.from_user.id, "–í–∞—Å –∑–æ–≤—É—Ç {0}, –≤–µ—Ä–Ω–æ?".format(name), reply_markup=markup)
        bot.register_next_step_handler(message, pre_reason)
    else:
        logging.info('User {0} exist into DB.'.format(user_id))
        send_message = '–û—Ç –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å. üßê\n' \
                       '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è.'
        bot.send_message(message.from_user.id, send_message)
        bot.register_next_step_handler(message, reason)


def pre_reason(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    if message.text == '–î–∞':
        text_message = '–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è.'
        print(text_message)
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
        bot.register_next_step_handler(message, reason)
    elif message.text == '–ù–µ—Ç':
        text_message = '–ñ–∞–ª—å. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑.'
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
        bot.register_next_step_handler(message, get_name)
    else:
        text_message = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø—Ä–∞–≤–∫–æ–π.\n/help'
        print(text_message)
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
    pass


def reason(message):
    global PATH_TO_DB
    print('u a here')
    user_id = message.from_user.id
    name = to_db.select_cl_id_tg(user_id, PATH_TO_DB)[2]
    user_reason = message.text

    markup = types.ReplyKeyboardMarkup(row_width=2)
    call_yes = types.KeyboardButton('–î–∞')
    call_no = types.KeyboardButton('–ù–µ—Ç')
    markup.add(call_yes, call_no)

    print(message.from_user.id, user_reason)
    to_db.upd_message(
        id_tg=message.from_user.id,
        msg=user_reason,
        path=PATH_TO_DB
    )

    to_send = '''–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–í–∞—Å –∑–æ–≤—É—Ç:\n{0}
    \n–ü—Ä–∏—á–∏–Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏—è:\n{1}'''.format(name, user_reason)
    bot.send_message(message.from_user.id, to_send, reply_markup=markup)
    bot.register_next_step_handler(message, check_reason)


def check_reason(message):
    markup = types.ReplyKeyboardRemove(selective=False)
    if message.text == '–î–∞':
        text_message = '–û—Ç–ª–∏—á–Ω–æ, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É.'
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
        pass
    elif message.text == '–ù–µ—Ç':
        text_message = '–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.'
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
        bot.register_next_step_handler(message, pre_get_name)
    else:
        text_message = '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø—Ä–∞–≤–∫–æ–π.\n/help'
        bot.send_message(message.from_user.id, text_message, reply_markup=markup)
    pass


def random_message(id_tg_user, text_message):
    bot.send_message(id_tg_user, text_message)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    all_users = to_db.all_client(PATH_TO_DB)
    for user in all_users:
        if user[0] == call.data:
            send_message = '–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–±–∏–Ω–µ—Ç.'
            bot.send_message(user[0], send_message)


bot.polling(none_stop=False, interval=0)
